{
   "class" : "Resource",
   "header" : "ris_lib/template.h",
   "namespace" : "ris",
   "resources" : [
      {
         "name" : "header_preamble",
         "source" : "/* This file has been generated using ris, do not modify! */\n",
         "source_type" : "string"
      },
      {
         "name" : "header_includes",
         "source" : "#include <string>\n",
         "source_type" : "string"
      },
      {
         "name" : "class_name",
         "source" : "Resource",
         "source_type" : "string"
      },
      {
         "name" : "source_preamble",
         "source" : "/* This file has been generated using ris, do not modify! */",
         "source_type" : "string"
      },
      {
         "name" : "source_includes",
         "source" : "#include <unordered_map>",
         "source_type" : "string"
      },
      {
         "name" : "header",
         "source" : "#pragma once\n{{header_preamble}}\n{{header_includes}}\nnamespace {{namespace_name}} {\nclass {{class_name}} /*final*/ {\npublic:\n{{header_declarations}}\npublic:\n    typedef std::string(*ResourceGetter)();\npublic: // key/value api\ntemplate <typename TInserter>\nstatic void GetKeys(TInserter inserter) {\n    static const char* keys[] = {\n{{header_resource_names}}    };\n    for (auto key : keys) {\n        inserter(key);\n    }\n}\npublic: // key/value api\n    static std::string Get(std::string const& key);\npublic:\n    static std::string OnNoKey(std::string const& key=\"\") {\n        return \"\";\n    }\n};\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "source",
         "source" : "{{source_preamble}}\n{{source_default_include}}\n{{source_includes}}\nnamespace {{namespace_name}} {\n{{source_definitions}}std::string Resource::Get(std::string const& key) {\n    static std::unordered_map<std::string,ResourceGetter> getters = {\n{{source_getters}}    };\n    auto getter = getters.find(key);\n    if (getter == getters.end())\n         return OnNoKey(key);\n    return getter->second();\n}\n}\n",
         "source_type" : "string",
         "compression" : "LZ4HC"
      },
      {
         "name" : "header_single_declaration",
         "source" : "    static std::string {{resource_member_name}}();\n",
         "source_type" : "string"
      },
      {
         "name" : "source_single_definition",
         "source" : "std::string Resource::{{resource_member_name}}() {\n    static char const literal[] =  {\n{{source_literal_bytes}}\n    };\n    return std::string(literal, sizeof(literal)/sizeof(char));\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "source_single_getter",
         "source" : "        { \"{{resource_name}}\", {{class_name}}::{{resource_member_name}} },\n",
         "source_type" : "string"
      },
      {
         "name" : "header_single_resource_name",
         "source" : "        \"{{resource_name}}\",\n",
         "source_type" : "string"
      }
   ],
   "source" : "ris_lib/template.cpp"
}
