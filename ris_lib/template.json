{
   "header" : "ris_lib/template.h",
   "namespace" : "ris",
   "resources" : [
      {
         "name" : "header_preamble",
         "source" : "/* This file has been generated using ris, do not modify! */\n",
         "source_type" : "string"
      },
      {
         "name" : "header_includes",
         "source" : "#include <string>\n",
         "source_type" : "string"
      },
      {
         "name" : "header_class",
         "source" : "class Resource /*final*/ {\n",
         "source_type" : "string"
      },
      {
         "name" : "header_key_getter_begin",
         "source" : "public:\n    typedef std::string(*ResourceGetter)();\npublic: // key/value api\ntemplate <typename TInserter>\nstatic void GetKeys(TInserter inserter) {\n    static const char* keys[] = {\n",
         "source_type" : "string"
      },
      {
         "name" : "header_key_getter_end",
         "source" : "    };\n    for (auto key : keys) {\n        inserter(key);\n    }\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "header_key_value_getter",
         "source" : "public: // key/value api\n    static std::string Get(std::string const& key);\n",
         "source_type" : "string"
      },
      {
         "name" : "header_on_no_key",
         "source" : "public:\n    static std::string OnNoKey(std::string const& key=\"\") {\n        // could be configured to throw\n        return \"\";\n    }\n",
         "source_type" : "string"
      },
      {
         "name" : "header_class_end",
         "source" : "};\n",
         "source_type" : "string"
      },
      {
         "name" : "source_preamble",
         "source" : "/* This file has been generated using ris, do not modify! */\n",
         "source_type" : "string"
      },
      {
         "name" : "source_includes",
         "source" : "#include <unordered_map>\n",
         "source_type" : "string"
      },
      {
         "name" : "source_getters_begin",
         "source" : "std::string Resource::Get(std::string const& key) {\n    static std::unordered_map<std::string,ResourceGetter> getters = {\n",
         "source_type" : "string"
      },
      {
         "name" : "source_getters_end",
         "source" : "    };\n    auto getter = getters.find(key);\n    if (getter == getters.end())\n         return OnNoKey(key);\n    return getter->second();\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "header",
         "source" : "#pragma once\n{{header_preamble}}\n{{header_includes}}\nnamespace {{namespace.name}} {\nclass {{class.name}} /*final*/ {\npublic:\n    {{header_declarations}}\npublic:\n    typedef std::string(*ResourceGetter)();\npublic: // key/value api\ntemplate <typename TInserter>\nstatic void GetKeys(TInserter inserter) {\n    static const char* keys[] = {\n        {{header_resource.names}}\n    };\n    for (auto key : keys) {\n        inserter(key);\n    }\n}\npublic: // key/value api\n    static std::string Get(std::string const& key);\npublic:\n    static std::string OnNoKey(std::string const& key=\"\") {\n        return \"\";\n    }\n};\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "source",
         "source" : "{{source.preamble}}\n{{source.default.include}}\n{{source.includes}}\nnamespace {{namespace.name}} {\n{{source.definitions}}\nstd::string Resource::Get(std::string const& key) {\n    static std::unordered_map<std::string,ResourceGetter> getters = {\n{{source.getters}}\n    };\n    auto getter = getters.find(key);\n    if (getter == getters.end())\n         return OnNoKey(key);\n    return getter->second();\n}\n}\n",
         "source_type" : "string"
      },
      {
         "name" : "header_single_declaration",
         "source" : "    static std::string {{resource.name}}();",
         "source_type" : "string"
      },
      {
         "name" : "source_single_definition",
         "source" : "std::string Resource::binary_file_test() {\n    static char const literal[] =  {\n{{source.literal.bytes}}\n    };\n    return std::string(literal, sizeof(literal)/sizeof(char));\n}",
         "source_type" : "string"
      },
      {
         "name" : "source_single_getter",
         "source" : "        { \"{{resource.name}}\", {{class.name}}::{{resource.name}} },",
         "source_type" : "string"
      },
      {
         "name" : "header_single_resource_name",
         "source" : "        \"{{resource.name}}\",",
         "source_type" : "string"
      }
   ],
   "source" : "ris_lib/template.cpp"
}
